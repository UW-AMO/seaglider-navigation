# This is a .gitignore file.  It a git directory, .gitignore tells git which
# files to ignore.  These files do not get pushed, pulled, or generate diffs.
# They also do not appear in `git status`.  Use these for working files that
# your project creates, or for large data files that you don't want to ship 
# back and forth with your code updates.  

# For files that you want to work on locally that are not part of the whole
# project, you can leave them off this list.  `git status` will alert you 
# of such files.  Still, you can leave them out of all pushing, pulling, 
# or other git commands by simply not adding them with `git add`.

# Lower directories can also include a .gitignore file.  In fact, since git
# does not track empty directories, you can add a .gitignore file to an 
# empty directory to force git to track it.

# Standard .gitignore templates: https://github.com/github/gitignore
# .gitignore formatting rules: https://help.github.com/en/articles/ignoring-files

# I'm adding the training folder here, since we may build a local virtual 
# environment called training.  Because the environment is built simply using 
# two commands, but includes a lot of files, each user should run those commands
# separately, rather than ship the entire environment with the repository. 
adcp-env/

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
!docs/build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# celery beat schedule file
celerybeat-schedule

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/
